import { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';

import { MessageService } from 'primeng/api';
import { TwitterService } from '../services/twitter.service';
import { DatePipe } from '@angular/common';
import { CustomService } from 'src/app/demo/service/custom.service';

@Component({
  selector: 'app-table',
  templateUrl: './table.component.html',
  styleUrls: ['./table.component.scss']
})
export class TableComponent implements OnInit {
  @Input() tweets: any = [];
  selectedMails: any[] = [];
  inboxField: boolean = false;
  outboxField: boolean = false;
  sentField: boolean = false
  replyAccountDialog: boolean = false;
  viewHstorytDialog: boolean = false;
  selectedAccount: any;
  template: any[] = [];
  selectedTemplate: any;
  to: any;
  from: any;
  fromAccount: any[] = [];
  toAccount: any[] = [];
  agentid: any;
  campid: any;
  userType: any;
  loginData: any;
  userDetails: any;
  listTweetsThread: any[] = [];
  listTweetsThreadValue: any;
  reply: boolean = true;
  replyTemplate: any;
  listTicketRecords: any[] = [];
  updatedValue1: any = 'Update'
  updated: boolean = true;
  ticketTypeArr1: any = [];
  statusArr1: any = [];
  assignedArr1: any = [];
  ticketType1: any;
  status1: any;
  assignedBy1: any;
  updateDisable1: boolean = true;
  updatedBy1: any;
  agentRemarks1: any;
  updatedByArr1: any[] = [];
  noOfTables: any[] = [];
  replyTemplates: any[] = [];
  liveChat: boolean = false;
  chatMessages: any[] = [];
  chatUser: any;
  textContent: any;
  userOfChats: any;
  selectedAttachment: any;
  accountid: any;
  remoteUserid: any;
  liveChatDialog: boolean = true;
  listTemplates: any[] = [];
  listSelectedTemp: any[] = [];
  selectedValue: any;
  newSelectTicket: any;

  constructor(
    private route: ActivatedRoute,
    private twitterService: TwitterService,
    private messageService: MessageService,
    private datePipe: DatePipe,
    private customerService: CustomService,
    private router: Router
  ) {
    this.route.url.subscribe(url => {
      this.inboxField = url[0]?.path === 'inbox';
      this.outboxField = url[0]?.path === 'outbox';
      this.sentField = url[0]?.path === 'sent';
    });
  }

  ngOnInit(): void {
    this.loginResData();
  }

  loginResData() {
    this.loginData = JSON.parse((localStorage.getItem("loginData")));
    

    this.campid = this.loginData.value[0].campid;
    this.userType = this.loginData.value[0].userType;
    this.agentid = sessionStorage.getItem('agentid');
  }

  loadTemplates() {
    let data = {
      campID: this.campid,
      sourcetype: this.listTweetsThreadValue.sourceType
    }
    

    this.twitterService.loadTemplates(data).subscribe((res: any) => {
      
      this.listTemplates = res.listTemplates;
    }, err => {
      
    })
  }


  onRowSelect(id) { }

  // replyField() {
  //   this.reply = false;
  // }

  replyField(data) {
    data.showReplyInput = true;
  }

  replyFields(inboxRowID) {
    
  }

  update() {
    if (this.updated) {
      
      this.messageService.add({ severity: 'info', summary: 'Ticket Changed to update mode', detail: '' });
      this.updatedValue1 = 'Save';
      this.updateDisable1 = false;
      this.ticketTypeArr1 = [
        { TicketType: 'Select', itemValue: '0' },
        { TicketType: 'AutoGeneratedTicketFromTweet', itemValue: '-2' },
        { TicketType: 'Sent to Exception', itemValue: '-3' },
        { TicketType: 'Sent to Technical  Team', itemValue: '-4' },
        { TicketType: 'Spam Mail', itemValue: '-5' },
        { TicketType: 'Success_IB', itemValue: '-6' },
        { TicketType: 'Successfully Replied/Closed', itemValue: '-7' },
        { TicketType: 'Abusive Customer_IB', itemValue: '-8' },
        { TicketType: 'From Customer', itemValue: '-9' },
        { TicketType: 'By Agent', itemValue: '-10' },
      ]
      this.twitterService.statusOptions().subscribe((res: any) => {
        
        this.statusArr1 = res;
      }, err => {
        
      })
      this.updated = false;
    } else {
      

      const ticket_Time = this.listTicketRecords[0].ticket_Time;
      const parsedDate1 = new Date(ticket_Time);
      const formattedDate1 = this.datePipe.transform(parsedDate1, 'yyyy-MM-dd HH:mm:ss.S');
      const startTime = this.listTicketRecords[0].start_Time;
      const parsedDate2 = new Date(startTime);
      const formattedDate2 = this.datePipe.transform(parsedDate2, 'yyyy-MM-dd HH:mm:ss.S');

      let data = {
        loginUserID: this.agentid,
        userType: this.userType,
        campID: this.campid,
        ticketID: this.listTicketRecords[0].ticketID,
        phoneID: this.listTicketRecords[0].phoneID,
        sourceName: 'twitter',
        campName: this.listTicketRecords[0].campName,
        action_No: this.listTicketRecords[0].action_No,
        ticket_Time: formattedDate1,
        ticketTime: this.listTicketRecords[0].ticketTime,
        assignedByID: this.listTicketRecords[0].assignedByID,
        ticket_TypeID: this.ticketType1,
        // ticket_TypeID: this.listTicketRecords[0].ticket_TypeID,
        ticket_statusID: this.status1,
        // ticket_statusID: this.listTicketRecords[0].ticket_statusID,
        remarks: this.agentRemarks1,
        // remarks: this.listTicketRecords[0].remarks,
        ticketStartTime: formattedDate2,
        source_ID: this.listTicketRecords[0].source_ID,
        source_Type: this.listTicketRecords[0].source_Type
      }
      

      this.twitterService.saveTickets(data).subscribe((res) => {
        
        if (res.status == 'success') {
          this.messageService.add({ severity: 'info', summary: res.ticketID, detail: 'Ticket Saved successfully' });
        } else {
          this.messageService.add({ severity: 'info', summary: res.ticketID, detail: '' });
        }
      }, err => {
        
      })

    }
  }

  ticketHistory() {
    this.noOfTables = [];

    let data = {
      campID: this.campid,
      ticketID: this.listTicketRecords[0].ticketID
    }
    

    this.twitterService.getTicketHistory(data).subscribe((res: any) => {
      
      this.noOfTables = res.value;
      
      this.viewHstorytDialog = true;

    }, err => {
      
    })
  }

  selectRow(selectedRow: any) {
    

    let data = {
      loginUserID: this.agentid,
      campID: this.campid,
      userType: this.userType,
      selectedTwitterInboxRecord: selectedRow
    }
    
    this.twitterService.selectRow(data).subscribe((res: any) => {
      

      this.listTweetsThread = JSON.parse(res.listTweetsThread);
      this.listTweetsThreadValue = JSON.parse(res.value);
      this.listTicketRecords = JSON.parse(res.listTicketRecords);

      
      
      
      this.replyAccountDialog = true;
      this.fromAccount = [];
      this.toAccount = [];
      this.ticketType1 = '';
      this.status1 = '';
      this.assignedBy1 = '';
      this.updatedBy1 = '';
      this.replyTemplate = '';
      this.reply = true;

      for (let i = 0; i <= this.listTweetsThread.length; i++) {
        this.fromAccount.push({
          account: this.listTweetsThread[i].socialMediaUserScreenName
        })

        this.toAccount.push({
          account: this.listTweetsThread[i].loginSocialMediaUser
        })

        this.ticketTypeArr1.push(
          { TicketType: this.listTicketRecords[i].ticket_type_name }
        )
        this.ticketType1 = this.listTicketRecords[i].ticket_type_name;
        this.statusArr1.push(
          { label: this.listTicketRecords[i].ticket_StatusName }
        )
        this.status1 = this.listTicketRecords[i].ticket_StatusName;
        this.assignedArr1.push(
          { AssignedBy: this.listTicketRecords[i].assignedByID }
        )
        this.assignedBy1 = this.listTicketRecords[i].assignedByID
        this.updatedByArr1.push(
          { updated: this.listTicketRecords[i].assignedByID }
        )
        

        this.updatedBy1 = this.listTicketRecords[i].updatedByID
        this.agentRemarks1 = this.listTicketRecords[i].remarks

        this.loadTemplates();
      }

    }, err => {
      
    })
  }


  // sendReply() {
  //   let data = {
  //     loginUserID: this.agentid,
  //     campID: this.campid,
  //     userType: this.userType,
  //     selectedTwitterInboxRecord: {
  //       text: this.replyTemplate,
  //       sourcetype: this.listTweetsThreadValue.sourceType,
  //       socialMediaUserScreenName: this.listTweetsThreadValue.socialMediaUserScreenName,
  //       accountID: this.listTweetsThreadValue.accountID,
  //       loginSocialMediaUser: this.listTweetsThreadValue.loginSocialMediaUser,
  //       inboxRowID: this.listTweetsThreadValue.inboxRowID,
  //       socialMediaMsgID: this.listTweetsThreadValue.socialMediaMsgID,
  //       socialMediaUserID: this.listTweetsThreadValue.socialMediaUserID,
  //       fld_TicketID: this.listTweetsThreadValue.fld_TicketID
  //     }
  //   }
  //   
  //   this.twitterService.sendReplyTweets(data).subscribe((res: any) => {
  //     
  //     this.replyAccountDialog = false;
  //     this.reply = true;
  //     this.messageService.add({ severity: 'info', summary: res.value, detail: '' });
  //   }, err => {
  //     
  //   })

  // }


  sendReply(data, replyTemplate) {
    let sendData = {
      loginUserID: this.agentid,
      campID: this.campid,
      userType: this.userType,
      selectedTwitterInboxRecord: {
        text: replyTemplate,
        sourcetype: data.sourceType,
        socialMediaUserScreenName: data.socialMediaUserScreenName,
        accountID: data.accountID,
        loginSocialMediaUser: data.loginSocialMediaUser,
        inboxRowID: data.inboxRowID,
        socialMediaMsgID: data.socialMediaMsgID,
        socialMediaUserID: data.socialMediaUserID,
        fld_TicketID: data.fld_TicketID
      }
    };
    
    this.twitterService.sendReplyTweets(sendData).subscribe((res: any) => {
      
      this.replyAccountDialog = false;
      this.reply = true;
      this.messageService.add({ severity: 'info', summary: res.value, detail: '' });
    }, err => {
      
    });
  }


  selectTempDropdown(i) {
    this.replyTemplates[i] = this.listSelectedTemp[i];
  }


  dmChat() {
    let data = {
      campID: this.campid,
      userType: this.userType,
      loginUserID: this.agentid,
      chatID: this.listTweetsThreadValue.inboxRowID.toString()
    }
    

    this.twitterService.openDMchat(data).subscribe((res: any) => {
      
      this.chatMessages = res.value[0].alChatMessages
      

      // if (this.liveChatDialog) {
        this.chatUser = res.value[0].remoteUser;
        this.accountid = res.value[0].accountid;
        this.remoteUserid = res.value[0].remoteUserid;
        this.liveChat = true;
        // this.liveChatDialog = false;
      // }

    }, err => {
      
    })

  }

  dealWithFiles(event: any) {
    

    this.selectedAttachment = null;
    if (event) {
      this.selectedAttachment = event.currentFiles[0];
      this.messageService.add({ severity: 'info', summary: event.currentFiles[0].name + ' selected', detail: '' });
    }
  }


  sendMessage() {
    let data = {
      campID: this.agentid,
      userType: this.userType,
      loginUserID: this.userType,
      text: this.textContent ? this.textContent : "",
      chatMaster: {
        remoteUser: this.chatUser,
        accountid: this.accountid,
        remoteUserid: this.remoteUserid
      }
    }
    

    if (this.selectedAttachment) {
      this.twitterService.sendDMmessages(data, this.selectedAttachment).subscribe((res) => {
        this.dmChat();
        this.textContent = ''
        this.selectedAttachment = '';
        setTimeout(() => {
          this.dmChat();
        }, 1500)
      })
    } else {
      this.twitterService.sendDMmessages(data, '').subscribe((res) => {
        this.dmChat();
        this.textContent = ''
        setTimeout(() => {
          this.dmChat();
        }, 1500)
      })
    }
  }


  newTicket() {
    let data = {
      campID: this.campid,
      twitterUserID: this.listTweetsThreadValue.socialMediaUserID,
    }
    
    
    this.twitterService.newTicket(data).subscribe((res:any)=>{
      
      if(res.status=='Success'){
        sessionStorage.setItem('phnno', res.phoneno);
        sessionStorage.setItem('phoneID', res.phoneid);
        this.router.navigateByUrl('iCallMate-cCP/customFormm');
        // window.location.reload();
      }
    },err=>{
      
    })
  }

}
